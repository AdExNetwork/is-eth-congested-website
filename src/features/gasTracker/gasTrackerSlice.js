import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { fetchGasInfo } from "./gasTrackerAPI"

const initialState = {
  gasInfo: {},
  status: "initial",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchGasInfoAsync = createAsyncThunk(
  "gasTracker/fetchGasInfo",
  async amount => {
    const response = await fetchGasInfo(amount)
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const counterSlice = createSlice({
  name: "gasTracker",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setGasInfo: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.gasInfo = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(fetchGasInfoAsync.pending, state => {
        state.status = "loading"
      })
      .addCase(fetchGasInfoAsync.fulfilled, (state, action) => {
        state.status = "idle"
        console.log(action.payload)
        state.gasInfo = action.payload
      })
  },
})

export const { setGasInfo } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectGasInfo = state => state.gasTracker.gasInfo

export default counterSlice.reducer
